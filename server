import socket, cv2, pickle,struct
import face_recognition
import numpy as np


nauman_image = face_recognition.load_image_file("nauman/Nauman.jpeg")
nauman_face_encoding = face_recognition.face_encodings(nauman_image)[0]

    # Load a second sample picture and learn how to recognize it.
muzammil_image = face_recognition.load_image_file("muzammil/muzammil.jpeg")
muzammil_face_encoding = face_recognition.face_encodings(muzammil_image)[0]

    # Create arrays of known face encodings and their names
known_face_encodings = [
    nauman_face_encoding,
    muzammil_face_encoding
]
known_face_names = [
    "nauman",
    "muzammil"
]

    # Initialize some variables
face_locations = []
face_encodings = []
face_names = []
process_this_frame = True


# Socket Create
server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
host_name  = socket.gethostname()
host_ip = "" ##your ip
print('HOST IP:',host_ip)
port = 9999
socket_address = (host_ip,port)

server_socket.bind(socket_address)

# Socket Listen
server_socket.listen(5)
print("LISTENING AT:",socket_address)

# Socket Accept
while True:
    client_socket,addr = server_socket.accept()
    print('GOT CONNECTION FROM:',addr)
    if client_socket:
        vid = cv2.VideoCapture(0)

        while(vid.isOpened()):
            img,frame = vid.read()
            small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
            rgb_small_frame = small_frame[:, :, ::-1]

            if process_this_frame:
                # Find all the faces and face encodings in the current frame of video
                face_locations = face_recognition.face_locations(rgb_small_frame)
                face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

                face_names = []
                for apple in face_encodings:
                        # See if the face is a match for the known face(s)
                        
                    matches = face_recognition.compare_faces(known_face_encodings, apple)
                    name="unknown" 
                         

                        # # If a match was found in known_face_encodings, just use the first one.
                        # if True in matches:
                        #     first_match_index = matches.index(True)
                        #     name = known_face_names[first_match_index]

                        # Or instead, use the known face with the smallest distance to the new face
                    face_distances = face_recognition.face_distance(known_face_encodings, apple)
                    best_match_index = np.argmin(face_distances)
                    if matches[best_match_index]:
                        name = known_face_names[best_match_index]
                        print(name)

                    face_names.append(name)

            process_this_frame = not process_this_frame


                # Display the results
            for (top, right, bottom, left), name in zip(face_locations, face_names):
                    # Scale back up face locations since the frame we detected in was scaled to 1/4 size
                top *= 4
                right *= 4
                bottom *= 4
                left *= 4

                    # Draw a box around the face
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)

                    # Draw a label with a name below the face
                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
                font = cv2.FONT_HERSHEY_DUPLEX
                if name=='unknown':
                    print("unknown")
                    import RPi.GPIO as GPIO
                    from time import sleep
                    GPIO.setmode(GPIO.BOARD)
                    GPIO.setup(5, GPIO.OUT)
                    pwm=GPIO.PWM(5, 50)
                    pwm.start(0)
                    def SetAngle(angle):
                        duty = angle / 18 + 2
                        GPIO.output(5, True)
                        pwm.ChangeDutyCycle(duty)
                        sleep(1)
                        GPIO.output(5, False)
                        pwm.ChangeDutyCycle(0)

                    SetAngle(45) 
                    pwm.stop()
                    GPIO.cleanup()


                cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)

            a = pickle.dumps(frame)
            message = struct.pack("Q",len(a))+a
            client_socket.sendall(message)

            cv2.imshow('TRANSMITTING VIDEO',frame)
            key = cv2.waitKey(1) & 0xFF
            if key ==ord('q'):
                client_socket.close()
